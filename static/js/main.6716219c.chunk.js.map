{"version":3,"sources":["components/RowAndColumn/RowAndColumn.js","components/GridMaker/GridMaker.js","components/Cell/Cell.js","App.js","reportWebVitals.js","index.js"],"names":["RowAndColumn","className","type","onClick","this","props","resetGrid","id","decrementRow","incrementRow","setRowBadge","decrementCol","incrementCol","setColBadge","Component","StyledGridContainer","styled","div","numberOfColumns","numberOfRows","GridMaker","columns","rows","children","hoverStyle","keyframes","StyledDiv","Cell","stop","document","getElementById","style","backgroundColor","App","state","Row","Col","showGrid","clearGrid","incrementRowHandler","newRow","setState","decrementRowHandler","incrementColHandler","newCol","decrementColHandler","resetGridHandler","showGridHandler","doesShow","clear","grid","cells","i","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6716219c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./RowAndColumn.css\";\r\n// -----------------------------------------------------*\r\nclass RowAndColumn extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <button type=\"reset\" onClick={this.props.resetGrid} id=\"resetButton\">\r\n          Reset\r\n        </button>\r\n        <div className=\"row-column\">\r\n          <h3>Row</h3>\r\n          <button onClick={this.props.decrementRow}>-</button>\r\n          <button onClick={this.props.incrementRow}>+</button>\r\n          <span>{this.props.setRowBadge*10}</span>\r\n          <h3>Column</h3>\r\n          <button onClick={this.props.decrementCol}>-</button>\r\n          <button onClick={this.props.incrementCol}>+</button>\r\n          <span>{this.props.setColBadge*10}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default RowAndColumn;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport \"./GridMaker.css\";\r\n// -----------------------------------------------------*\r\n// Grid container\r\nconst StyledGridContainer = styled.div`\r\n  // regular CSS goes here :\r\n  // *Dynamic grid via dynamic 'styled-component'*\r\n  display: grid;\r\n  grid-template-columns: repeat(${(props) => props.numberOfColumns}, 10px);\r\n  grid-template-rows: repeat(${(props) => props.numberOfRows}, 10px);\r\n  margin: 0 auto;\r\n  justify-content: center;\r\n  align-item: center;\r\n  margin-top: 20px;\r\n  cursor: cell;\r\n`;\r\nclass GridMaker extends Component {\r\n  render() {\r\n    return (\r\n      <StyledGridContainer\r\n        numberOfColumns={this.props.columns*10}\r\n        numberOfRows={this.props.rows*10}\r\n      >\r\n        {this.props.children}\r\n      </StyledGridContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GridMaker;\r\n","import React, { Component } from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport \"./Cell.css\";\r\n\r\nconst hoverStyle = keyframes`\r\n0% {\r\n    background-color: #caffbf;\r\n    border-color: #06d6a0;\r\n    }\r\n    100% {\r\n      background-color#06d6a0: #06d6a0;\r\n      border-color: #06d6a0;\r\n    }`;\r\n// Grid's cell - Styling\r\nconst StyledDiv = styled.div`\r\n  display: flex;\r\n  border: 1px solid #06d6a0;\r\n  background-color: #06d6a0;\r\n  animation-name: ${hoverStyle};\r\n  animation-duration: 100ms;\r\n  animation-fill-mode: backwards;\r\n  &:active,\r\n  &:focus,\r\n  &:hover {\r\n    animation-fill-mode: forwards;\r\n  }\r\n`;\r\nclass Cell extends Component {\r\n  stop = () => {\r\n    let cell = document.getElementById(this.props.id);\r\n    cell.style.backgroundColor = \"#caffbf\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <StyledDiv\r\n        className=\"cell\"\r\n        onClick={this.stop}\r\n        id={this.props.id}\r\n      ></StyledDiv>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from \"react\";\r\nimport RowAndColumn from \"./components/RowAndColumn/RowAndColumn\";\r\nimport GridMaker from \"./components/GridMaker/GridMaker\";\r\nimport Cell from \"./components/Cell/Cell\";\r\nimport \"./App.css\";\r\n// -----------------------------------------------------*\r\nclass App extends Component {\r\n  state = {\r\n    Row: 0,\r\n    Col: 0,\r\n    showGrid: false,\r\n    clearGrid: false,\r\n  };\r\n\r\n  //-----------------Event Handlers (start)-------------*\r\n  // -----Add Row------*\r\n  incrementRowHandler = () => {\r\n    let newRow = this.state.Row;\r\n    newRow++;\r\n    this.setState({ Row: newRow });\r\n  };\r\n  decrementRowHandler = () => {\r\n    let newRow = this.state.Row;\r\n\r\n    if (newRow === 0) {\r\n      this.setState({ Row: newRow });\r\n    } else if (newRow > 0) {\r\n      newRow = newRow - 1;\r\n    }\r\n    this.setState({ Row: newRow });\r\n  };\r\n  // -----Add Column------*\r\n  incrementColHandler = () => {\r\n    let newCol = this.state.Col;\r\n    newCol++;\r\n    this.setState({ Col: newCol });\r\n  };\r\n  decrementColHandler = () => {\r\n    let newCol = this.state.Col;\r\n    if (newCol === 0) {\r\n      this.setState({ Col: newCol });\r\n    } else if (newCol > 0) {\r\n      newCol = newCol - 1;\r\n    }\r\n    this.setState({ Col: newCol });\r\n  };\r\n  // Reset Button\r\n  resetGridHandler = () => {\r\n    this.setState({ Row: 0 });\r\n    this.setState({ Col: 0 });\r\n  };\r\n  showGridHandler = () => {\r\n    // Dynamic Grid using dynamic CSS in react\r\n    // console.log(\"Grid has been created!\");\r\n    let doesShow = this.state.showGrid;\r\n    this.setState({ showGrid: !doesShow });\r\n  };\r\n  clearGrid = () => {\r\n    let clear = this.state.clearGrid;\r\n    this.setState({ clearGrid: !clear });\r\n  };\r\n  //-----------------Event Handlers (end)-------------*\r\n  render() {\r\n    let grid = null;\r\n    let cells = [];\r\n    if (this.state.showGrid) {\r\n      for (let i = 0; i < this.state.Row * 10 * (this.state.Col * 10); i++) {\r\n        cells.push(<Cell id={i} />);\r\n      }\r\n      // console.log(cells);\r\n      grid = (\r\n        <div>\r\n          <GridMaker columns={this.state.Col} rows={this.state.Row}>\r\n            {/* We need 'props.children' here */}\r\n            {cells}\r\n          </GridMaker>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.clearGrid) {\r\n      for (let i = 0; i < this.state.Row * 10 * (this.state.Col * 10); i++) {\r\n        cells[i] = null;\r\n      }\r\n      grid = (\r\n        <div>\r\n          <GridMaker columns={this.state.Col} rows={this.state.Row}>\r\n            {/* We need 'props.children' here */}\r\n            {cells}\r\n          </GridMaker>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Pixel Art Maker</h1>\r\n        <RowAndColumn\r\n          incrementRow={this.incrementRowHandler}\r\n          setRowBadge={this.state.Row}\r\n          decrementRow={this.decrementRowHandler}\r\n          incrementCol={this.incrementColHandler}\r\n          setColBadge={this.state.Col}\r\n          decrementCol={this.decrementColHandler}\r\n          resetGrid={this.resetGridHandler}\r\n        />\r\n        <div className=\"create-clear\">\r\n          <button onClick={this.showGridHandler}>Create</button>\r\n          <button onClick={this.clearGrid}>Clear</button>\r\n        </div>\r\n        {grid}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// -----------------------------------------------------*\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}